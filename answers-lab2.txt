Question 1. Assuming that the following JOS kernel code is correct, what type should variable x 
have, uintptr_t or physaddr_t?
    
    mystery_t x;
    char* value = return_a_pointer();
    *value = 10;
    x = (mystery_t) value;

Assuming the above kernel code is correct, x should have type physaddr_t because uintptr_t is used 
to represent the numerical values of virtual addresses, which is able to be dereferenced. Physaddr_t 
is used to represent physical addresses.


Question 2. What entries (rows) in the page directory have been filled in at this point? What 
addresses do they map and where do they point? In other words, fill out this table as much as 
possible:

    Entry   |   Base Virtual Address                |   Points to Logically
    1023    |   0xFFC00000                          |   Page table for top 4MB of phys memory
    1022    |   0XFF800000                          |   ?
    .       |   ?                                   |   ?
    960     |   0XF0000000 (KERNBASE, KSTACKTOP)    |   mapped physical memory, bootstack+KSTKSIZE
    .       |   ?                                   |   ?
    959     |   0XEFC00000 (MMIOLIM)                |   memory-mapped I/O
    958     |   0XEF800000 (ULIM, MMIOBASE)         |   current page table, read only
    957     |   0XEF400000 (UPVT)                   |   kern_pgdir, read only
    956     |   0XEF000000 (UPAGES)                 |   pages, read only
    .       |   ?                                   |   ?
    2       |   0X00800000                          |   UTEXT
    1       |   0x00400000                          |   UTEMP
    0       |   0x00000000                          |   [see next question]


Question 3. We have placed the kernel and user environment in the same address space. Why will user 
programs not be able to read or write the kernelâ€™s memory? What specific mechanisms protect the kernel 
memory?

This is because of permission flags, which restrict who can access, as well as how they can access the 
content. User run applications are assigned access level 3, while kernel has access 0. If the address 
space is indicated by lack of user write flag to have user read-only access, then the user is unable to 
write over the space. The lack of a user read flag would also indicate users do not have any access to 
the instance of kernel memory.


Question 4. What is the maximum amount of physical memory that this operating system can support? Why?

Physical memory is at addresses 0XF0000000 to 0XFFFFFFFF, meaning that the size of physical memory 
avaliable if 0xFFFFFFF, or 268435455 bytes. This can be rounded and rewrittend to 256 MB. Therefore
this operating system can support maximum 256 MB.


Question 5. How much space overhead is there for managing memory, if we actually had the maximum amount 
of physical memory? How is this overhead broken down?

4MB for struct PageInfo
2MB for pagetables - each pagetable is 4096 bytes or 4 KB
4KB for the page directory - refer to pagetables

Therefore, the total memory used is 4KB + 6MB, or just above 4KB.


Question 6. Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we 
turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to 
running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP 
between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this 
transition necessary?

We transition to running at an EIP above KERNBASE at "jmp *%eax" on line 68 in entry.S. From here, we
will be running virtual addresses. It is possible to continue executing at a low EIP because the 
lower section of virtual addresses was mapped to the lower section of physical addresses. The transition
is necessary to allow user programs to continue to using low EIPs.


Citing Sources Used:
 * TAs help to debug (Jacob Reger and Rudy Peralta)