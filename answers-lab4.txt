Question 1. Compare kern/mpentry.S side by side with boot/boot.S. Bearing in mind that 
kern/mpentry.S is compiled and linked to run above KERNBASE just like everything else in 
the kernel, what is the purpose of macro MPBOOTPHYS? Why is it necessary in 
kern/mpentry.S but not in boot/boot.S? In other words, what could go wrong if it were 
omitted in kern/mpentry.S? Hint: recall the differences between the link address and the 
load address that we have discussed in Lab 1.

It is necessary because MPBOOTPHYS places the virtual address in MPENTRY_PADDR after 
calculating it with the offset. boot/boot.S is loaded by the BIOs at page 0, but in 
kern/mpentry.S the kernel is linked at KERNBASE while still being loaded at 0.


Question 2. It seems that using the big kernel lock guarantees that only one CPU can run 
the kernel code at a time. Why do we still need separate kernel stacks for each CPU? 
Describe a scenario in which using a shared kernel stack will go wrong, even with the 
protection of the big kernel lock.

We still need separate kernel stacks for each CPU because a trap frame is pushed each
time a processor enters the kernel. This distinction is necessary despite only one CPU
running at a time.


Question 3. In your implementation of env_run() you should have called lcr3(). Before 
and after the call to lcr3(), your code makes references (at least it should) to the 
variable e, the argument to env_run. Upon loading the %cr3 register, the addressing 
context used by the MMU is instantly changed. But a virtual address (namely e) has 
meaning relative to a given address context–the address context specifies the physical 
address to which the virtual address maps. Why can the pointer e be dereferenced both 
before and after the addressing switch?

The pointer e can be dereferenced both before and after the address switch because the
struct mappings in e are copied during the switch.


Question 4. Whenever the kernel switches from one environment to another, it must 
ensure the old environment’s registers are saved so they can be restored properly later. 
Why? Where does this happen?

The old environment's registers are saved in the user environment's stack to be used 
later after the new environment that is being started is completed. They are restored by
JOS using the env_pop_tf() function, which pops the registers off the stack.
